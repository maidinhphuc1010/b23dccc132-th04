import { useState, useCallback, useEffect } from 'react';
import {
	getDiplomaBooks,
	createDiplomaBook as createDiplomaBookService,
	getGraduationDecisions,
	createGraduationDecision as createGraduationDecisionService,
	getDiplomaFormFields,
	createDiplomaFormField as createDiplomaFormFieldService,
	updateDiplomaFormField as updateDiplomaFormFieldService,
	deleteDiplomaFormField as deleteDiplomaFormFieldService,
	getDiplomaInfos,
	createDiplomaInfo as createDiplomaInfoService,
	searchDiplomaInfo as searchDiplomaInfoService,
	deleteDiplomaInfo as deleteDiplomaInfoService,
} from '@/services/diploma';

export type DataType = 'String' | 'Number' | 'Date';

export interface DiplomaFormField {
	id: string;
	name: string;
	dataType: DataType;
	required: boolean;
	order: number;
}

export interface DiplomaBook {
	id: string;
	year: number;
	currentNumber: number;
	createdAt: string;
	updatedAt: string;
}

export interface GraduationDecision {
	id: string;
	number: string;
	issueDate: string;
	summary: string;
	diplomaBookId: string;
	createdAt: string;
	updatedAt: string;
}

export interface DiplomaInfo {
	id: string;
	studentId: string;
	fullName: string;
	ethnicity: string;
	placeOfBirth: string;
	admissionDate: string;
	averageRank: number;
	graduationDecisionId: string;
	customFields: Record<string, any>;
	createdAt: string;
	updatedAt: string;
	bookNumber: string;
	diplomaNumber: string;
	autoGenerated?: boolean;
}

interface ApiResponse<T> {
	data: T;
	status: number;
	message?: string;
}

export default function useDiplomaModel() {
	const [diplomaBooks, setDiplomaBooks] = useState<DiplomaBook[]>([]);
	const [graduationDecisions, setGraduationDecisions] = useState<GraduationDecision[]>([]);
	const [diplomaFormFields, setDiplomaFormFields] = useState<DiplomaFormField[]>([]);
	const [diplomaInfos, setDiplomaInfos] = useState<DiplomaInfo[]>([]);

	// üõ† T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
	useEffect(() => {
		const loadData = async () => {
			try {
				const [booksRes, decisionsRes, fieldsRes, infosRes] = await Promise.all([
					getDiplomaBooks(),
					getGraduationDecisions(),
					getDiplomaFormFields(),
					getDiplomaInfos(),
				]);

				setDiplomaBooks(booksRes.data || []);
				setGraduationDecisions(decisionsRes.data || []);
				setDiplomaFormFields(fieldsRes.data || []);
				setDiplomaInfos(infosRes.data || []);
			} catch (error) {
				console.error('‚ö†Ô∏è L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
			}
		};

		loadData();
	}, []);

	// üìå Th√™m s·ªï vƒÉn b·∫±ng
	const createDiplomaBook = useCallback(async (year: number) => {
		try {
			const response: ApiResponse<DiplomaBook> = await createDiplomaBookService(year);
			if (response.data) {
				setDiplomaBooks((prev) => [...prev, response.data]);
				return response.data;
			}
			throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫°o s·ªï vƒÉn b·∫±ng');
		} catch (error) {
			console.error('‚ö†Ô∏è L·ªói khi t·∫°o s·ªï vƒÉn b·∫±ng:', error);
		}
	}, []);

	// üìå Th√™m quy·∫øt ƒë·ªãnh t·ªët nghi·ªáp
	const createGraduationDecision = useCallback(
		async (decision: Omit<GraduationDecision, 'id' | 'createdAt' | 'updatedAt'>) => {
			try {
				const response: ApiResponse<GraduationDecision> = await createGraduationDecisionService(decision);
				if (response.data) {
					setGraduationDecisions((prev) => [...prev, response.data]);
					return response.data;
				}
				throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫°o quy·∫øt ƒë·ªãnh t·ªët nghi·ªáp');
			} catch (error) {
				console.error('‚ö†Ô∏è L·ªói khi t·∫°o quy·∫øt ƒë·ªãnh t·ªët nghi·ªáp:', error);
			}
		},
		[],
	);

	// üìå Qu·∫£n l√Ω tr∆∞·ªùng th√¥ng tin vƒÉn b·∫±ng
	const createDiplomaFormField = useCallback(async (field: Omit<DiplomaFormField, 'id'>) => {
		try {
			const response: ApiResponse<DiplomaFormField> = await createDiplomaFormFieldService(field);
			if (response.data) {
				setDiplomaFormFields((prev) => [...prev, response.data]);
				return response.data;
			}
			throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫°o tr∆∞·ªùng th√¥ng tin');
		} catch (error) {
			console.error('‚ö†Ô∏è L·ªói khi t·∫°o tr∆∞·ªùng th√¥ng tin:', error);
		}
	}, []);

	const updateDiplomaFormField = useCallback(async (field: DiplomaFormField) => {
		try {
			const response: ApiResponse<DiplomaFormField> = await updateDiplomaFormFieldService(field);
			if (response.data) {
				setDiplomaFormFields((prev) => prev.map((item) => (item.id === field.id ? response.data : item)));
				return response.data;
			}
			throw new Error(response.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr∆∞·ªùng th√¥ng tin');
		} catch (error) {
			console.error('‚ö†Ô∏è L·ªói khi c·∫≠p nh·∫≠t tr∆∞·ªùng th√¥ng tin:', error);
		}
	}, []);

	const deleteDiplomaFormField = useCallback(async (id: string) => {
		try {
			await deleteDiplomaFormFieldService(id);
			setDiplomaFormFields((prev) => prev.filter((item) => item.id !== id));
		} catch (error) {
			console.error('‚ö†Ô∏è L·ªói khi x√≥a tr∆∞·ªùng th√¥ng tin:', error);
		}
	}, []);

	// üìå Th√™m v√† t√¨m ki·∫øm vƒÉn b·∫±ng
	const createDiplomaInfo = useCallback(async (data: Omit<DiplomaInfo, 'id' | 'createdAt' | 'updatedAt'>) => {
		try {
			const response: ApiResponse<DiplomaInfo> = await createDiplomaInfoService(data);
			if (response.data) {
				setDiplomaInfos((prev) => [...prev, response.data]);
				return response.data;
			}
			throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫°o vƒÉn b·∫±ng');
		} catch (error) {
			console.error('‚ö†Ô∏è L·ªói khi t·∫°o vƒÉn b·∫±ng:', error);
		}
	}, []);

	const searchDiplomaInfo = useCallback(async (query: Partial<DiplomaInfo>) => {
		try {
			const response: ApiResponse<DiplomaInfo[]> = await searchDiplomaInfoService(query);
			setDiplomaInfos(response.data || []);
		} catch (error) {
			console.error('‚ö†Ô∏è L·ªói khi t√¨m ki·∫øm vƒÉn b·∫±ng:', error);
		}
	}, []);

	// üìå X√≥a vƒÉn b·∫±ng
	const removeDiploma = useCallback(async (id: string) => {
		try {
			await deleteDiplomaInfoService(id);
			setDiplomaInfos((prev) => prev.filter((item) => item.id !== id));
		} catch (error) {
			console.error('‚ö†Ô∏è L·ªói khi x√≥a vƒÉn b·∫±ng:', error);
		}
	}, []);

	return {
		diplomaBooks,
		graduationDecisions,
		diplomaFormFields,
		diplomaInfos,
		createDiplomaBook,
		createGraduationDecision,
		createDiplomaFormField,
		updateDiplomaFormField,
		deleteDiplomaFormField,
		createDiplomaInfo,
		searchDiplomaInfo,
		removeDiploma,
	};
}
